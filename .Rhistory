A -> B; A -> C; B -> D; B -> E;
D -> F; D -> G; D -> H;
H -> I; G -> J; I -> J
# add horizontal edge statement
edge [arrowhead = x]
I -> 1 [label = 'contain',
style = dashed,
color = blue]
}
")
library(DiagrammeR)
grViz("
digraph boxes_and_circles {
# add node statements
node [shape = boxes,
penwidth = 2.0]
A [label = 'Real Numbers \\n (R)'];
B [label = 'Rational Numbers \\n (Q)'];
C [label = 'Irrational Numbers \\n (I)'];
D [label = 'Integers \\n (Z) \\n ...,-2,-1,0,1,2,...'];
E [label = 'Non-Integers'];
F [label = 'Negative Integers \\n (Z-) \\n ...,-3,-2,-1'];
G [label = 'Zero \\n 0'];
H [label = 'Positive Integers \\n (Z+) \\n 1,2,3,...'];
I [label = 'Natural Numbers \\n (N) \\n 1,2,3,...' ];
J [label = 'Whole Numbers \\n (W) \\n 0,1,2,3,...']
node [shape = oval
fillcolor = yellow
penwidth = 2.0]
1 [label = 'Even Numbers \\n Odd Numbers \\n Prime Numbers'
fillcolor = red]
# add edge statements
A -> B; A -> C; B -> D; B -> E;
D -> F; D -> G; D -> H;
H -> I; G -> J; I -> J
# add horizontal edge statement
I -> 1 [label = 'contain',
style = dashed,
color = blue]
}
")
library(DiagrammeR)
grViz("
digraph boxes_and_circles {
# add node statements
node [shape = boxes,
penwidth = 2.0]
A [label = 'Real Numbers \\n (R)'];
B [label = 'Rational Numbers \\n (Q)'];
C [label = 'Irrational Numbers \\n (I)'];
D [label = 'Integers \\n (Z) \\n ...,-2,-1,0,1,2,...'];
E [label = 'Non-Integers'];
F [label = 'Negative Integers \\n (Z-) \\n ...,-3,-2,-1'];
G [label = 'Zero \\n 0'];
H [label = 'Positive Integers \\n (Z+) \\n 1,2,3,...'];
I [label = 'Natural Numbers \\n (N) \\n 1,2,3,...' ];
J [label = 'Whole Numbers \\n (W) \\n 0,1,2,3,...']
node [shape = oval
fillcolor = red
penwidth = 2.0]
1 [label = 'Even Numbers \\n Odd Numbers \\n Prime Numbers']
# add edge statements
A -> B; A -> C; B -> D; B -> E;
D -> F; D -> G; D -> H;
H -> I; G -> J; I -> J
# add horizontal edge statement
I -> 1 [label = 'contain',
style = dashed,
color = blue]
}
")
library(DiagrammeR)
grViz("
digraph boxes_and_circles {
# add node statements
node [shape = boxes,
penwidth = 2.0]
A [label = 'Real Numbers \\n (R)'];
B [label = 'Rational Numbers \\n (Q)'];
C [label = 'Irrational Numbers \\n (I)'];
D [label = 'Integers \\n (Z) \\n ...,-2,-1,0,1,2,...'];
E [label = 'Non-Integers'];
F [label = 'Negative Integers \\n (Z-) \\n ...,-3,-2,-1'];
G [label = 'Zero \\n 0'];
H [label = 'Positive Integers \\n (Z+) \\n 1,2,3,...'];
I [label = 'Natural Numbers \\n (N) \\n 1,2,3,...' ];
J [label = 'Whole Numbers \\n (W) \\n 0,1,2,3,...']
node [shape = oval]
1 [x
fillcolor = green
label = 'Even Numbers \\n Odd Numbers \\n Prime Numbers']
# add edge statements
A -> B; A -> C; B -> D; B -> E;
D -> F; D -> G; D -> H;
H -> I; G -> J; I -> J
# add horizontal edge statement
I -> 1 [label = 'contain',
style = dashed,
color = blue]
}
")
library(DiagrammeR)
grViz("
digraph boxes_and_circles {
# add node statements
node [shape = boxes,
penwidth = 2.0]
A [label = 'Real Numbers \\n (R)'];
B [label = 'Rational Numbers \\n (Q)'];
C [label = 'Irrational Numbers \\n (I)'];
D [label = 'Integers \\n (Z) \\n ...,-2,-1,0,1,2,...'];
E [label = 'Non-Integers'];
F [label = 'Negative Integers \\n (Z-) \\n ...,-3,-2,-1'];
G [label = 'Zero \\n 0'];
H [label = 'Positive Integers \\n (Z+) \\n 1,2,3,...'];
I [label = 'Natural Numbers \\n (N) \\n 1,2,3,...' ];
J [label = 'Whole Numbers \\n (W) \\n 0,1,2,3,...']
node [shape = oval]
1 [fillcolor = green
label = 'Even Numbers \\n Odd Numbers \\n Prime Numbers']
# add edge statements
A -> B; A -> C; B -> D; B -> E;
D -> F; D -> G; D -> H;
H -> I; G -> J; I -> J
# add horizontal edge statement
I -> 1 [label = 'contain',
style = dashed,
color = blue]
}
")
library(DiagrammeR)
grViz("
digraph boxes_and_circles {
# add node statements
node [shape = boxes,
penwidth = 2.0]
A [label = 'Real Numbers \\n (R)'];
B [label = 'Rational Numbers \\n (Q)'];
C [label = 'Irrational Numbers \\n (I)'];
D [label = 'Integers \\n (Z) \\n ...,-2,-1,0,1,2,...'];
E [label = 'Non-Integers'];
F [label = 'Negative Integers \\n (Z-) \\n ...,-3,-2,-1'];
G [label = 'Zero \\n 0'];
H [label = 'Positive Integers \\n (Z+) \\n 1,2,3,...'];
I [label = 'Natural Numbers \\n (N) \\n 1,2,3,...' ];
J [label = 'Whole Numbers \\n (W) \\n 0,1,2,3,...']
node [fillcolor = green]
1 [fillcolor = green
label = 'Even Numbers \\n Odd Numbers \\n Prime Numbers']
# add edge statements
A -> B; A -> C; B -> D; B -> E;
D -> F; D -> G; D -> H;
H -> I; G -> J; I -> J
# add horizontal edge statement
I -> 1 [label = 'contain',
style = dashed,
color = blue]
}
")
library(DiagrammeR)
grViz("
digraph boxes_and_circles {
# add node statements
node [shape = boxes,
penwidth = 2.0]
A [label = 'Real Numbers \\n (R)'];
B [label = 'Rational Numbers \\n (Q)'];
C [label = 'Irrational Numbers \\n (I)'];
D [label = 'Integers \\n (Z) \\n ...,-2,-1,0,1,2,...'];
E [label = 'Non-Integers'];
F [label = 'Negative Integers \\n (Z-) \\n ...,-3,-2,-1'];
G [label = 'Zero \\n 0'];
H [label = 'Positive Integers \\n (Z+) \\n 1,2,3,...'];
I [label = 'Natural Numbers \\n (N) \\n 1,2,3,...' ];
J [label = 'Whole Numbers \\n (W) \\n 0,1,2,3,...']
node [shape = plaintext]
1 [label = 'Even Numbers \\n Odd Numbers \\n Prime Numbers']
# add edge statements
A -> B; A -> C; B -> D; B -> E;
D -> F; D -> G; D -> H;
H -> I; G -> J; I -> J
# add horizontal edge statement
I -> 1 [label = 'contain',
style = dashed,
color = blue]
}
")
library(DiagrammeR)
grViz("
digraph boxes_and_circles {
# add node statements
node [shape = boxes,
penwidth = 2.0]
A [label = 'Real Numbers \\n (R)'];
B [label = 'Rational Numbers \\n (Q)'];
C [label = 'Irrational Numbers \\n (I)'];
D [label = 'Integers \\n (Z) \\n ...,-2,-1,0,1,2,...'];
E [label = 'Non-Integers'];
F [label = 'Negative Integers \\n (Z-) \\n ...,-3,-2,-1'];
G [label = 'Zero \\n 0'];
H [label = 'Positive Integers \\n (Z+) \\n 1,2,3,...'];
I [label = 'Natural Numbers \\n (N) \\n 1,2,3,...' ];
J [label = 'Whole Numbers \\n (W) \\n 0,1,2,3,...']
node [fillcolor = green]
1 [label = 'Even Numbers \\n Odd Numbers \\n Prime Numbers']
# add edge statements
A -> B; A -> C; B -> D; B -> E;
D -> F; D -> G; D -> H;
H -> I; G -> J; I -> J
# add horizontal edge statement
I -> 1 [label = 'contain',
style = dashed,
color = blue]
}
")
library(DiagrammeR)
grViz("
digraph boxes_and_circles {
# add node statements
node [shape = boxes,
penwidth = 2.0]
A [label = 'Real Numbers \\n (R)'];
B [label = 'Rational Numbers \\n (Q)'];
C [label = 'Irrational Numbers \\n (I)'];
D [label = 'Integers \\n (Z) \\n ...,-2,-1,0,1,2,...'];
E [label = 'Non-Integers'];
F [label = 'Negative Integers \\n (Z-) \\n ...,-3,-2,-1'];
G [label = 'Zero \\n 0'];
H [label = 'Positive Integers \\n (Z+) \\n 1,2,3,...'];
I [label = 'Natural Numbers \\n (N) \\n 1,2,3,...' ];
J [label = 'Whole Numbers \\n (W) \\n 0,1,2,3,...']
node [shape = oval,
style = filled,
color = green]
1 [label = 'Even Numbers \\n Odd Numbers \\n Prime Numbers']
# add edge statements
A -> B; A -> C; B -> D; B -> E;
D -> F; D -> G; D -> H;
H -> I; G -> J; I -> J
# add horizontal edge statement
I -> 1 [label = 'contain',
style = dashed,
color = blue]
}
")
library(DiagrammeR)
grViz("
digraph boxes_and_circles {
# add node statements
node [shape = boxes,
penwidth = 2.0]
A [label = 'Real Numbers \\n (R)'];
B [label = 'Rational Numbers \\n (Q)'];
C [label = 'Irrational Numbers \\n (I)'];
D [label = 'Integers \\n (Z) \\n ...,-2,-1,0,1,2,...'];
E [label = 'Non-Integers'];
F [label = 'Negative Integers \\n (Z-) \\n ...,-3,-2,-1'];
G [label = 'Zero \\n 0'];
H [label = 'Positive Integers \\n (Z+) \\n 1,2,3,...'];
I [label = 'Natural Numbers \\n (N) \\n 1,2,3,...' ];
J [label = 'Whole Numbers \\n (W) \\n 0,1,2,3,...']
node [shape = square,
style = filled,
color = orange]
1 [label = 'Even Numbers \\n Odd Numbers \\n Prime Numbers']
# add edge statements
A -> B; A -> C; B -> D; B -> E;
D -> F; D -> G; D -> H;
H -> I; G -> J; I -> J
# add horizontal edge statement
I -> 1 [label = 'contain',
style = dashed,
color = blue]
}
")
library(DiagrammeR)
grViz("
digraph boxes_and_circles {
# add node statements
node [shape = boxes,
penwidth = 2.0]
A [label = 'Real Numbers \\n (R)'];
B [label = 'Rational Numbers \\n (Q)'];
C [label = 'Irrational Numbers \\n (I)'];
D [label = 'Integers \\n (Z) \\n ...,-2,-1,0,1,2,...'];
E [label = 'Non-Integers'];
F [label = 'Negative Integers \\n (Z-) \\n ...,-3,-2,-1'];
G [label = 'Zero \\n 0'];
H [label = 'Positive Integers \\n (Z+) \\n 1,2,3,...'];
I [label = 'Natural Numbers \\n (N) \\n 1,2,3,...' ];
J [label = 'Whole Numbers \\n (W) \\n 0,1,2,3,...']
node [shape = square,
style = filled,
color = orange]
1 [label = 'Even Numbers \\n Odd Numbers \\n Prime Numbers']
# add edge statements
A -> B; A -> C; B -> D; B -> E;
D -> F; D -> G; D -> H;
H -> I; G -> J; I -> J
# add horizontal edge statement
I --> 1 [label = 'contain',
style = dashed,
color = blue]
}
")
library(DiagrammeR)
grViz("
digraph boxes_and_circles {
# add node statements
node [shape = boxes,
penwidth = 2.0]
A [label = 'Real Numbers \\n (R)'];
B [label = 'Rational Numbers \\n (Q)'];
C [label = 'Irrational Numbers \\n (I)'];
D [label = 'Integers \\n (Z) \\n ...,-2,-1,0,1,2,...'];
E [label = 'Non-Integers'];
F [label = 'Negative Integers \\n (Z-) \\n ...,-3,-2,-1'];
G [label = 'Zero \\n 0'];
H [label = 'Positive Integers \\n (Z+) \\n 1,2,3,...'];
I [label = 'Natural Numbers \\n (N) \\n 1,2,3,...' ];
J [label = 'Whole Numbers \\n (W) \\n 0,1,2,3,...']
node [shape = square,
style = filled,
color = orange]
1 [label = 'Even Numbers \\n Odd Numbers \\n Prime Numbers']
# add edge statements
A -> B; A -> C; B -> D; B -> E;
D -> F; D -> G; D -> H;
H -> I; G -> J; I -> J
# add horizontal edge statement
I -> 1 [label = 'contain',
style = dashed,
color = blue]
}
")
library(DiagrammeR)
grViz("
digraph boxes_and_circles {
# add node statements
node [shape = boxes,
penwidth = 2.0]
A [label = 'Real Numbers \\n (R)'];
B [label = 'Rational Numbers \\n (Q)'];
C [label = 'Irrational Numbers \\n (I)'];
D [label = 'Integers \\n (Z) \\n ...,-2,-1,0,1,2,...'];
E [label = 'Non-Integers'];
F [label = 'Negative Integers \\n (Z-) \\n ...,-3,-2,-1'];
G [label = 'Zero \\n 0'];
H [label = 'Positive Integers \\n (Z+) \\n 1,2,3,...'];
I [label = 'Natural Numbers \\n (N) \\n 1,2,3,...' ];
J [label = 'Whole Numbers \\n (W) \\n 0,1,2,3,...']
node [shape = square,
style = filled,
color = orange]
1 [label = 'Even Numbers \\n Odd Numbers \\n Prime Numbers']
# add edge statements
A -> B; A -> C; B -> D; B -> E;
D -> F; D -> G; D -> H;
H -> I; G -> J; I -> J
# add horizontal edge statement
I -> 1 [label = 'contain',
style = dashed,
color = blue]
}
height = 500
")
library(DiagrammeR)
grViz("
digraph boxes_and_circles {
# add node statements
node [shape = boxes,
penwidth = 2.0]
A [label = 'Real Numbers \\n (R)'];
B [label = 'Rational Numbers \\n (Q)'];
C [label = 'Irrational Numbers \\n (I)'];
D [label = 'Integers \\n (Z) \\n ...,-2,-1,0,1,2,...'];
E [label = 'Non-Integers'];
F [label = 'Negative Integers \\n (Z-) \\n ...,-3,-2,-1'];
G [label = 'Zero \\n 0'];
H [label = 'Positive Integers \\n (Z+) \\n 1,2,3,...'];
I [label = 'Natural Numbers \\n (N) \\n 1,2,3,...' ];
J [label = 'Whole Numbers \\n (W) \\n 0,1,2,3,...']
node [shape = square,
style = filled,
color = orange]
1 [label = 'Even Numbers \\n Odd Numbers \\n Prime Numbers']
# add edge statements
A -> B; A -> C; B -> D; B -> E;
D -> F; D -> G; D -> H;
H -> I; G -> J; I -> J
# add horizontal edge statement
I -> 1 [label = 'contain',
style = dashed,
color = blue]
}",
height = 500
)
library(DiagrammeR)
grViz("
digraph boxes_and_circles {
# add node statements
node [shape = boxes,
penwidth = 2.0]
A [label = 'Real Numbers \\n (R)'];
B [label = 'Rational Numbers \\n (Q)'];
C [label = 'Irrational Numbers \\n (I)'];
D [label = 'Integers \\n (Z) \\n ...,-2,-1,0,1,2,...'];
E [label = 'Non-Integers'];
F [label = 'Negative Integers \\n (Z-) \\n ...,-3,-2,-1'];
G [label = 'Zero \\n 0'];
H [label = 'Positive Integers \\n (Z+) \\n 1,2,3,...'];
I [label = 'Natural Numbers \\n (N) \\n 1,2,3,...' ];
J [label = 'Whole Numbers \\n (W) \\n 0,1,2,3,...']
node [shape = square,
style = filled,
color = orange]
1 [label = 'Even Numbers \\n Odd Numbers \\n Prime Numbers']
# add edge statements
A -> B; A -> C; B -> D; B -> E;
D -> F; D -> G; D -> H;
H -> I; G -> J; I -> J
# add horizontal edge statement
I -> 1 [label = 'contain',
style = dashed,
color = blue]
}",
height = 2000
)
library(DiagrammeR)
grViz("
digraph boxes_and_circles {
# add node statements
node [shape = boxes,
penwidth = 2.0]
A [label = 'Real Numbers \\n (R)'];
B [label = 'Rational Numbers \\n (Q)'];
C [label = 'Irrational Numbers \\n (I)'];
D [label = 'Integers \\n (Z) \\n ...,-2,-1,0,1,2,...'];
E [label = 'Non-Integers'];
F [label = 'Negative Integers \\n (Z-) \\n ...,-3,-2,-1'];
G [label = 'Zero \\n 0'];
H [label = 'Positive Integers \\n (Z+) \\n 1,2,3,...'];
I [label = 'Natural Numbers \\n (N) \\n 1,2,3,...' ];
J [label = 'Whole Numbers \\n (W) \\n 0,1,2,3,...']
node [shape = square,
style = filled,
color = orange]
1 [label = 'Even Numbers \\n Odd Numbers \\n Prime Numbers']
# add edge statements
A -> B; A -> C; B -> D; B -> E;
D -> F; D -> G; D -> H;
H -> I; G -> J; I -> J
# add horizontal edge statement
I -> 1 [label = 'contain',
style = dashed,
color = blue]
}"
)
library(tidyverse)
x=c(-6:6)
y=c(-6:6)
df %>%
ggplot(aes(x,y))+geom_abline(aes(slope=0,intercept=0))+
annotate("text",x=2,y=4,label="P",size=9,colour="red")+
annotate("text",x=-4,y=-6,label="Q",colour="red",size=9)+
geom_vline(xintercept = 0)+
geom_point(aes(x=0,y=0))+
geom_segment(aes(x=0,y=0,xend=2,yend=4),
arrow=arrow(length = unit(0.5,"cm"),angle=20),lineend = "butt")+
geom_segment(aes(x=0,y=0,xend=-4,yend=-6),
arrow=arrow(length = unit(0.5,"cm"),angle=20),lineend = "butt",linejoin="round")+
theme_minimal()
library(tidyverse)
x=c(-6:6)
y=c(-6:6)
df <- data.frame(x,y)
df %>%
ggplot(aes(x,y))+geom_abline(aes(slope=0,intercept=0))+
annotate("text",x=2,y=4,label="P",size=9,colour="red")+
annotate("text",x=-4,y=-6,label="Q",colour="red",size=9)+
geom_vline(xintercept = 0)+
geom_point(aes(x=0,y=0))+
geom_segment(aes(x=0,y=0,xend=2,yend=4),
arrow=arrow(length = unit(0.5,"cm"),angle=20),lineend = "butt")+
geom_segment(aes(x=0,y=0,xend=-4,yend=-6),
arrow=arrow(length = unit(0.5,"cm"),angle=20),lineend = "butt",linejoin="round")+
theme_minimal()
library(tidyverse)
x=c(-6:6)
y=c(-6:6)
df <- data.frame(x,y)
df %>%
ggplot(aes(x,y))+geom_abline(aes(slope=0,intercept=0))+
annotate("text",x=2,y=4,label="P",size=9,colour="red")+
annotate("text",x=-4,y=-6,label="Q",colour="red",size=9)+
geom_vline(xintercept = 0)+
geom_point(aes(x=0,y=0))+
geom_segment(aes(x=0,y=0,xend=2,yend=4),
arrow=arrow(length = unit(0.5,"cm"),angle=20),lineend = "butt")+
geom_segment(aes(x=0,y=0,xend=-4,yend=-6),
arrow=arrow(length = unit(0.5,"cm"),angle=20),lineend = "butt",linejoin="round")+
theme_minimal()
library(ggplot2)
ggplot() +
geom_segment(aes(x = 0, y = 0, xend = 2, yend = 4)) +
geom_segment(aes(x = 0, y = 0, xend = -4, yend = -6))
library(revtools)
# install and load package
install.packages("revtools")
setwd("C:/Users/kaman/Desktop/Business Project")
setwd("D:/R/Teaching/MAT111 - Business Mathematics/MAT111 - Business Mathematics/Business Mathematics for UiTM")
file.create('.nojekyll')
